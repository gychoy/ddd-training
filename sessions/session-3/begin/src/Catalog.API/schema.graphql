schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Brand implements Node {
  products("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ProductsConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  id: ID!
  name: String!
}

type BrandNotFoundError implements Error {
  message: String!
  id: Int!
}

"A connection to a list of items."
type BrandsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BrandsEdge!]
  "A flattened list of the nodes."
  nodes: [Brand!]
}

"An edge in a connection."
type BrandsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Brand!
}

type ChangeProductPricePayload {
  product: Product
  errors: [ChangeProductPriceError!]
}

type CreateBrandPayload {
  brand: Brand
}

type CreateProductPayload {
  product: Product
}

type Mutation {
  createBrand(input: CreateBrandInput!): CreateBrandPayload! @cost(weight: "10")
  renameBrand(input: RenameBrandInput!): RenameBrandPayload! @cost(weight: "10")
  createProduct(input: CreateProductInput!): CreateProductPayload! @cost(weight: "10")
  changeProductPrice(input: ChangeProductPriceInput!): ChangeProductPricePayload! @cost(weight: "10")
  removeProductStock(input: RemoveProductStockInput!): RemoveProductStockPayload! @cost(weight: "10")
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Product implements Node {
  brand: Brand! @cost(weight: "10")
  id: ID!
  name: String!
  description: String
  price: Decimal!
  typeId: Int!
  availableStock: Int!
  restockThreshold: Int!
  maxStockThreshold: Int!
  onReorder: Boolean!
}

type ProductNotEnoughStockError implements Error {
  message: String!
  productId: Int!
  availableStock: Int!
  quantityDesired: Int!
}

type ProductNotFoundError implements Error {
  message: String!
  id: Int!
}

type ProductOutOfStockError implements Error {
  message: String!
  productId: Int!
}

"A connection to a list of items."
type ProductsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ProductsEdge!]
  "A flattened list of the nodes."
  nodes: [Product!]
}

"An edge in a connection."
type ProductsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node @cost(weight: "10")
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]! @cost(weight: "10")
  brandById(id: ID!): Brand @cost(weight: "10")
  brands("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): BrandsConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  productById(id: ID!): Product @cost(weight: "10")
  products("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): ProductsConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
}

type RemoveProductStockPayload {
  product: Product
  errors: [RemoveProductStockError!]
}

type RenameBrandPayload {
  brand: Brand
  errors: [RenameBrandError!]
}

union ChangeProductPriceError = ProductNotFoundError

union RemoveProductStockError = ProductOutOfStockError | ProductNotEnoughStockError

union RenameBrandError = BrandNotFoundError

input ChangeProductPriceInput {
  id: ID!
  price: Decimal!
}

input CreateBrandInput {
  name: String!
}

input CreateProductInput {
  brandId: ID!
  typeId: ID!
  name: String!
  description: String
  initialPrice: Decimal!
  restockThreshold: Int!
  maxStockThreshold: Int!
}

input RemoveProductStockInput {
  id: ID!
  quantityDesired: Int!
}

input RenameBrandInput {
  id: Int!
  name: String!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal